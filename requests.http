# You can use this file to easily send requests to your API.
# Prerequisite: humao.rest-client Vscode plugin (already present on codespace)
# High-level overview of REST API concepts used here: https://www.packtpub.com/en-us/learning/how-to-tutorials/what-are-rest-verbs-and-status-codes-tutorial?srsltid=AfmBOoppDqtkhRxj5BLZONRZFzRDmh6eP-xyTo6H4OuEHYuVbrg1d4Dm


# Requests for API endpoints of the sample project:

### Hello world endpoint: get response "Hello, Stranger!"
GET http://localhost:8080/hello-world

### Hello world with a request param passed.
# When sending the request it will ask you for the name
# hitting enter will avoid passing the param, and do the default behaviour above
# @prompt name The name to display in response
GET http://localhost:8080/hello-world
    ?name={{name}}

### Save a greeting to database
@postGreetingId = 1001
@postGreetingContent = Hello!
POST http://localhost:8080/greetings
Content-Type: application/json

{
    "id": "{{postGreetingId}}",
    "content": "{{postGreetingContent}}"
}

### Get all greetings
GET http://localhost:8080/greetings

### Get info for greeting with given content
# @prompt content Greeting content to look for, defaults to "Overview"
GET http://localhost:8080/info
    ?title={{content}}

### Update an existing greeting
@putGreetingId = 1001
@putGreetingContent = Hello again!
PUT http://localhost:8080/greetings/{{putGreetingId}}
Content-Type: application/json

{
    "content": "{{putGreetingContent}}"
}

### Delete greeting
@deleteGreetingId = 1001
DELETE http://localhost:8080/greetings/{{deleteGreetingId}}


# TODO add requests for your own endpoints!

### Register a new user with user role

POST http://localhost:8080/api/auth/register
Content-Type: application/json

{
    "username": "testuserv13",
    "email": "testv13@example.com",
    "password": "testpasswordv13",
    "admin": false
}

### Register a new user with admin role

POST http://localhost:8080/api/auth/register
Content-Type: application/json

{
    "username": "adminuserv8",
    "email": "adminv8@example.com",
    "password": "adminpasswordv8",
    "admin": true
}

### User login

POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "testuserv14",
    "password": "testpasswordv14"
}

### Admin user login

POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "adminuserv8",
    "password": "adminpasswordv8"
}

### Access the user's own data (no Authorization header required)
GET http://localhost:8080/api/auth/users/testuserv13

### Access the user's own data (no Authorization header required)
GET http://localhost:8080/api/auth/users/adminuserv8

### Access user data with Authorization header (admin token)
GET http://localhost:8080/api/auth/users/adminuserv8
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbnVzZXJ2OCIsImlhdCI6MTc0MjgxNDg0NCwiZXhwIjoxNzQyOTAxMjQ0LCJyb2xlcyI6WyJST0xFX1VTRVIiLCJST0xFX0FETUlOIl19.TnY5HQTw9x2MnvK637iGfGDyRokZ9EG3T-S9fX5kz-o

### Try to delete a user as admin (admin token required)
DELETE http://localhost:8080/api/auth/users/testuserv14
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbnVzZXJ2OCIsImlhdCI6MTc0MjgxNDg0NCwiZXhwIjoxNzQyOTAxMjQ0LCJyb2xlcyI6WyJST0xFX1VTRVIiLCJST0xFX0FETUlOIl19.TnY5HQTw9x2MnvK637iGfGDyRokZ9EG3T-S9fX5kz-o

### Try to delete a user as non-admin (should fail)
DELETE http://localhost:8080/api/auth/users/testuserv11
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0dXNlcnYxMyIsImlhdCI6MTc0MjgxNDk4NiwiZXhwIjoxNzQyOTAxMzg2LCJyb2xlcyI6WyJST0xFX1VTRVIiXX0.VE4kD0SXuS_egCNYO-r8OJpjJFtV2whD2sW16z26t2Y



### Create a new notificare
POST http://localhost:8080/notificare
Content-Type: application/json

{
  "notificareId": 1,
  "eventId": 123,
  "tipVerificare": "Sample Tip",
  "verificare": true
}

### Get a notificare by eventId
GET http://localhost:8080/notificare/123
